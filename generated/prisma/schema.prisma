// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      UserRole
  avatar    String? // URL de imagen opcional
  createdAt DateTime  @default(now())
  lastLogin DateTime?

  appointments Appointment[]
  reports      Report[]      @relation("CreatedReports")
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?  @unique
  phone     String?
  notes     String?
  createdAt DateTime @default(now())

  appointments Appointment[]
}

model Appointment {
  id          Int               @id @default(autoincrement())
  date        DateTime
  status      AppointmentStatus @default(PENDING)
  tag         String?
  isRecurring Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relaciones
  user   User @relation(fields: [userId], references: [id])
  userId Int

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int

  service   Service? @relation(fields: [serviceId], references: [id])
  serviceId Int?

  reports Report[] // Relación inversa
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  duration    Int // duración en minutos
  price       Float?
  createdAt   DateTime @default(now())

  appointments Appointment[]
}

model Report {
  id               Int      @id @default(autoincrement())
  description      String
  isForEventCancel Boolean  @default(false)
  hasRecovery      Boolean  @default(false)
  createdAt        DateTime @default(now())

  // Relaciones
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId Int

  createdBy   User @relation(name: "CreatedReports", fields: [createdById], references: [id])
  createdById Int
}

enum UserRole {
  ADMIN
  PROFESSIONAL
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
